// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceRoleAttachment() *schema.Resource {
	return &schema.Resource{
		CreateContext:      wrapCrudOperation(resourceRoleAttachmentCreate),
		ReadContext:        wrapCrudOperation(resourceRoleAttachmentRead),
		DeleteContext:      wrapCrudOperation(resourceRoleAttachmentDelete),
		DeprecationMessage: "sdm_role_attachment is deprecated, see docs for more info",
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"attached_role_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The id of the attached role of this RoleAttachment.",
			},
			"composite_role_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The id of the composite role of this RoleAttachment.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertRoleAttachmentFromResourceData(d *schema.ResourceData) *sdm.RoleAttachment {
	return &sdm.RoleAttachment{
		ID:              d.Id(),
		AttachedRoleID:  convertStringFromResourceData(d, "attached_role_id"),
		CompositeRoleID: convertStringFromResourceData(d, "composite_role_id"),
	}
}

func resourceRoleAttachmentCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertRoleAttachmentFromResourceData(d)

	resp, err := cc.RoleAttachments().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create RoleAttachment: %w", err)
	}
	d.SetId(resp.RoleAttachment.ID)
	v := resp.RoleAttachment
	d.Set("attached_role_id", (v.AttachedRoleID))
	d.Set("composite_role_id", (v.CompositeRoleID))
	return nil
}

func resourceRoleAttachmentRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertRoleAttachmentFromResourceData(d)
	_ = localVersion

	resp, err := cc.RoleAttachments().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read RoleAttachment %s: %w", d.Id(), err)
	}
	v := resp.RoleAttachment
	d.Set("attached_role_id", (v.AttachedRoleID))
	d.Set("composite_role_id", (v.CompositeRoleID))
	return nil
}
func resourceRoleAttachmentDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.RoleAttachments().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
