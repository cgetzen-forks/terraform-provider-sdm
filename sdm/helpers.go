// This file was generated by protogen. DO NOT EDIT.

// Package sdm is a terraform provider for strongDM
package sdm

import (
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
	sdm "github.com/strongdm/web/pkg/api/v1/generated/go"
)

type apiCrudOperation func(d *schema.ResourceData, client *sdm.Client) error

func wrapCrudOperation(op apiCrudOperation) func(d *schema.ResourceData, m interface{}) error {
	return func(d *schema.ResourceData, meta interface{}) error {
		client := meta.(*sdm.Client)
		return op(d, client)
	}
}

func convertTagsFromMap(m map[string]interface{}, key string) sdm.Tags {
	value := m[key]
	if value == nil {
		return nil
	}
	tags, ok := value.(map[string]interface{})
	if !ok {
		return nil
	}
	res := sdm.Tags{}
	for key, value := range tags {
		str, ok := value.(string)
		if !ok {
			continue
		}
		res[key] = str
	}
	return res
}

func convertTagsFromResourceData(d *schema.ResourceData, key string) sdm.Tags {
	value := d.Get(key)
	if value == nil {
		return nil
	}
	tags, ok := value.(map[string]interface{})
	if !ok {
		return nil
	}
	res := sdm.Tags{}
	for key, value := range tags {
		str, ok := value.(string)
		if !ok {
			continue
		}
		res[key] = str
	}
	return res
}

func convertTagsToMap(tags sdm.Tags) map[string]interface{} {
	res := map[string]interface{}{}
	for key, value := range tags {
		res[key] = value
	}
	return res
}

func convertStringFromMap(m map[string]interface{}, key string) string {
	value := m[key]
	if value == nil {
		return ""
	}
	return value.(string)
}

func convertStringFromResourceData(d *schema.ResourceData, key string) string {
	value := d.Get(key)
	if value == nil {
		return ""
	}
	return value.(string)
}

func convertInt32FromMap(m map[string]interface{}, key string) int32 {
	value := m[key]
	if value == nil {
		return 0
	}
	return int32(value.(int))
}

func convertInt32FromResourceData(d *schema.ResourceData, key string) int32 {
	value := d.Get(key)
	if value == nil {
		return 0
	}
	return int32(value.(int))
}

func convertBoolFromMap(m map[string]interface{}, key string) bool {
	value := m[key]
	if value == nil {
		return false
	}
	return value.(bool)
}

func convertBoolFromResourceData(d *schema.ResourceData, key string) bool {
	value := d.Get(key)
	if value == nil {
		return false
	}
	return value.(bool)
}

func fullSecretStorePath(raw map[string]interface{}, cred string) string {
	path := convertStringFromMap(raw, "secret_store_"+cred+"_path")
	key := convertStringFromMap(raw, "secret_store_"+cred+"_key")
	if key != "" {
		return path + "?key=" + key
	}
	return path
}
