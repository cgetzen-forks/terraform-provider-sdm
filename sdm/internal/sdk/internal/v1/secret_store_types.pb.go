// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: secret_store_types.proto

// This file was generated by protogen. DO NOT EDIT.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A SecretStore is a server where resource secrets (passwords, keys) are stored.
// Coming soon support for HashiCorp Vault and AWS Secret Store. Contact support@strongdm.com to request access to the beta.
type SecretStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SecretStore:
	//
	//	*SecretStore_Aws
	//	*SecretStore_Azure
	//	*SecretStore_CyberarkConjur
	//	*SecretStore_CyberarkPamExperimental
	//	*SecretStore_Delinea
	//	*SecretStore_Gcp
	//	*SecretStore_VaultAppRole
	//	*SecretStore_VaultTls
	//	*SecretStore_VaultToken
	SecretStore isSecretStore_SecretStore `protobuf_oneof:"secret_store"`
}

func (x *SecretStore) Reset() {
	*x = SecretStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStore) ProtoMessage() {}

func (x *SecretStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStore.ProtoReflect.Descriptor instead.
func (*SecretStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{0}
}

func (m *SecretStore) GetSecretStore() isSecretStore_SecretStore {
	if m != nil {
		return m.SecretStore
	}
	return nil
}

func (x *SecretStore) GetAws() *AWSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *SecretStore) GetAzure() *AzureStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *SecretStore) GetCyberarkConjur() *CyberarkConjurStore {
	if x, ok := x.GetSecretStore().(*SecretStore_CyberarkConjur); ok {
		return x.CyberarkConjur
	}
	return nil
}

func (x *SecretStore) GetCyberarkPamExperimental() *CyberarkPAMExperimentalStore {
	if x, ok := x.GetSecretStore().(*SecretStore_CyberarkPamExperimental); ok {
		return x.CyberarkPamExperimental
	}
	return nil
}

func (x *SecretStore) GetDelinea() *DelineaStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Delinea); ok {
		return x.Delinea
	}
	return nil
}

func (x *SecretStore) GetGcp() *GCPStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (x *SecretStore) GetVaultAppRole() *VaultAppRoleStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAppRole); ok {
		return x.VaultAppRole
	}
	return nil
}

func (x *SecretStore) GetVaultTls() *VaultTLSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTls); ok {
		return x.VaultTls
	}
	return nil
}

func (x *SecretStore) GetVaultToken() *VaultTokenStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultToken); ok {
		return x.VaultToken
	}
	return nil
}

type isSecretStore_SecretStore interface {
	isSecretStore_SecretStore()
}

type SecretStore_Aws struct {
	Aws *AWSStore `protobuf:"bytes,3,opt,name=aws,proto3,oneof"`
}

type SecretStore_Azure struct {
	Azure *AzureStore `protobuf:"bytes,101,opt,name=azure,proto3,oneof"`
}

type SecretStore_CyberarkConjur struct {
	CyberarkConjur *CyberarkConjurStore `protobuf:"bytes,301,opt,name=cyberark_conjur,json=cyberarkConjur,proto3,oneof"`
}

type SecretStore_CyberarkPamExperimental struct {
	CyberarkPamExperimental *CyberarkPAMExperimentalStore `protobuf:"bytes,302,opt,name=cyberark_pam_experimental,json=cyberarkPamExperimental,proto3,oneof"`
}

type SecretStore_Delinea struct {
	Delinea *DelineaStore `protobuf:"bytes,2900,opt,name=delinea,proto3,oneof"`
}

type SecretStore_Gcp struct {
	Gcp *GCPStore `protobuf:"bytes,201,opt,name=gcp,proto3,oneof"`
}

type SecretStore_VaultAppRole struct {
	VaultAppRole *VaultAppRoleStore `protobuf:"bytes,4,opt,name=vault_app_role,json=vaultAppRole,proto3,oneof"`
}

type SecretStore_VaultTls struct {
	VaultTls *VaultTLSStore `protobuf:"bytes,1,opt,name=vault_tls,json=vaultTls,proto3,oneof"`
}

type SecretStore_VaultToken struct {
	VaultToken *VaultTokenStore `protobuf:"bytes,2,opt,name=vault_token,json=vaultToken,proto3,oneof"`
}

func (*SecretStore_Aws) isSecretStore_SecretStore() {}

func (*SecretStore_Azure) isSecretStore_SecretStore() {}

func (*SecretStore_CyberarkConjur) isSecretStore_SecretStore() {}

func (*SecretStore_CyberarkPamExperimental) isSecretStore_SecretStore() {}

func (*SecretStore_Delinea) isSecretStore_SecretStore() {}

func (*SecretStore_Gcp) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAppRole) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTls) isSecretStore_SecretStore() {}

func (*SecretStore_VaultToken) isSecretStore_SecretStore() {}

type AWSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AWSStore) Reset() {
	*x = AWSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSStore) ProtoMessage() {}

func (x *AWSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSStore.ProtoReflect.Descriptor instead.
func (*AWSStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{1}
}

func (x *AWSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSStore) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AzureStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VaultUri string `protobuf:"bytes,3,opt,name=vault_uri,json=vaultUri,proto3" json:"vault_uri,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AzureStore) Reset() {
	*x = AzureStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureStore) ProtoMessage() {}

func (x *AzureStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureStore.ProtoReflect.Descriptor instead.
func (*AzureStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{2}
}

func (x *AzureStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AzureStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AzureStore) GetVaultUri() string {
	if x != nil {
		return x.VaultUri
	}
	return ""
}

func (x *AzureStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CyberarkConjurStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppURL string `protobuf:"bytes,3,opt,name=appURL,proto3" json:"appURL,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CyberarkConjurStore) Reset() {
	*x = CyberarkConjurStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyberarkConjurStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyberarkConjurStore) ProtoMessage() {}

func (x *CyberarkConjurStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyberarkConjurStore.ProtoReflect.Descriptor instead.
func (*CyberarkConjurStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{3}
}

func (x *CyberarkConjurStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyberarkConjurStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CyberarkConjurStore) GetAppURL() string {
	if x != nil {
		return x.AppURL
	}
	return ""
}

func (x *CyberarkConjurStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CyberarkPAMExperimentalStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppURL string `protobuf:"bytes,3,opt,name=appURL,proto3" json:"appURL,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CyberarkPAMExperimentalStore) Reset() {
	*x = CyberarkPAMExperimentalStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyberarkPAMExperimentalStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyberarkPAMExperimentalStore) ProtoMessage() {}

func (x *CyberarkPAMExperimentalStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyberarkPAMExperimentalStore.ProtoReflect.Descriptor instead.
func (*CyberarkPAMExperimentalStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{4}
}

func (x *CyberarkPAMExperimentalStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetAppURL() string {
	if x != nil {
		return x.AppURL
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DelineaStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ServerUrl  string `protobuf:"bytes,3,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	TenantName string `protobuf:"bytes,4,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DelineaStore) Reset() {
	*x = DelineaStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelineaStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelineaStore) ProtoMessage() {}

func (x *DelineaStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelineaStore.ProtoReflect.Descriptor instead.
func (*DelineaStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{5}
}

func (x *DelineaStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DelineaStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DelineaStore) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *DelineaStore) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (x *DelineaStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GCPStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProjectID string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GCPStore) Reset() {
	*x = GCPStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPStore) ProtoMessage() {}

func (x *GCPStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPStore.ProtoReflect.Descriptor instead.
func (*GCPStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{6}
}

func (x *GCPStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GCPStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GCPStore) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GCPStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAppRoleStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAppRoleStore) Reset() {
	*x = VaultAppRoleStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAppRoleStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAppRoleStore) ProtoMessage() {}

func (x *VaultAppRoleStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAppRoleStore.ProtoReflect.Descriptor instead.
func (*VaultAppRoleStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{7}
}

func (x *VaultAppRoleStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAppRoleStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAppRoleStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAppRoleStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAppRoleStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTLSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CACertPath     string `protobuf:"bytes,4,opt,name=CA_cert_path,json=CACertPath,proto3" json:"CA_cert_path,omitempty"`
	ClientCertPath string `protobuf:"bytes,5,opt,name=client_cert_path,json=clientCertPath,proto3" json:"client_cert_path,omitempty"`
	ClientKeyPath  string `protobuf:"bytes,6,opt,name=client_key_path,json=clientKeyPath,proto3" json:"client_key_path,omitempty"`
	Namespace      string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServerAddress  string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTLSStore) Reset() {
	*x = VaultTLSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTLSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTLSStore) ProtoMessage() {}

func (x *VaultTLSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTLSStore.ProtoReflect.Descriptor instead.
func (*VaultTLSStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{8}
}

func (x *VaultTLSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTLSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTLSStore) GetCACertPath() string {
	if x != nil {
		return x.CACertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *VaultTLSStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTLSStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTLSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTokenStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTokenStore) Reset() {
	*x = VaultTokenStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTokenStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTokenStore) ProtoMessage() {}

func (x *VaultTokenStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTokenStore.ProtoReflect.Descriptor instead.
func (*VaultTokenStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{9}
}

func (x *VaultTokenStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTokenStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTokenStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTokenStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTokenStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_secret_store_types_proto protoreflect.FileDescriptor

var file_secret_store_types_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x07, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x22, 0xf2, 0xf8, 0xb3, 0x07, 0x1d, 0xca, 0xf3, 0xb3, 0x07, 0x18,
	0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x03, 0x61, 0x77, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12,
	0x4c, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x24,
	0xf2, 0xf8, 0xb3, 0x07, 0x1f, 0xca, 0xf3, 0xb3, 0x07, 0x1a, 0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x05, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x72, 0x0a,
	0x0f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79, 0x62,
	0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07,
	0x1e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75,
	0x72, 0x12, 0x97, 0x01, 0x0a, 0x19, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x5f, 0x70,
	0x61, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xca,
	0xf3, 0xb3, 0x07, 0x2c, 0xc2, 0xf4, 0xb3, 0x07, 0x27, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x17, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72,
	0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x17, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6d, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x18, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x26, 0xf2, 0xf8, 0xb3, 0x07, 0x21, 0xca, 0xf3, 0xb3, 0x07, 0x1c, 0xc2, 0xf4, 0xb3, 0x07, 0x17,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x07,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x12, 0x45, 0x0a, 0x03, 0x67, 0x63, 0x70, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x43, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x22,
	0xf2, 0xf8, 0xb3, 0x07, 0x1d, 0xca, 0xf3, 0xb3, 0x07, 0x18, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x03, 0x67,
	0x63, 0x70, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x6a, 0x0a, 0x0e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x2b, 0xf2, 0xf8, 0xb3, 0x07, 0x26, 0xca,
	0xf3, 0xb3, 0x07, 0x21, 0xc2, 0xf4, 0xb3, 0x07, 0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x27, 0xf2, 0xf8, 0xb3,
	0x07, 0x22, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x4c, 0x53, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6c, 0x73,
	0x12, 0x61, 0x0a, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x29, 0xf2, 0xf8, 0xb3, 0x07,
	0x24, 0xca, 0xf3, 0xb3, 0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x42,
	0x2c, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0xaa, 0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x74, 0x61, 0x67, 0x73, 0xaa,
	0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x02,
	0x0a, 0x08, 0x41, 0x57, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3,
	0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x54,
	0xfa, 0xf8, 0xb3, 0x07, 0x4f, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x45, 0xc2,
	0xf4, 0xb3, 0x07, 0x0a, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x03, 0x61, 0x77, 0x73, 0xc2, 0xf4,
	0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x03, 0x61, 0x77, 0x73, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x03, 0x61, 0x77, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0a, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2,
	0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3,
	0x07, 0x18, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x3a, 0x3a, 0xfa, 0xf8, 0xb3, 0x07, 0x35, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x2b, 0xc2, 0xf4, 0xb3, 0x07, 0x0c, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x05, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x22, 0xc8, 0x02, 0x0a,
	0x13, 0x43, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06,
	0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x7b, 0xfa, 0xf8, 0xb3, 0x07,
	0x76, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x6c, 0x88, 0xf4, 0xb3, 0x07, 0x01,
	0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0e, 0x63, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x63,
	0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0xc2, 0xf4, 0xb3,
	0x07, 0x25, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x22, 0xf0, 0x02, 0x0a, 0x1c, 0x43, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2,
	0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55,
	0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x99,
	0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x93, 0x01, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x88, 0x01, 0x88, 0xf4, 0xb3, 0x07, 0x01, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x03, 0x63, 0x6c,
	0x69, 0x12, 0x17, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0xc2, 0xf4, 0xb3, 0x07, 0x27, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x17, 0x63,
	0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0xc2, 0xf4, 0xb3, 0x07, 0x2f, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x6d, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x4f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f,
	0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x43, 0xfa, 0xf8, 0xb3, 0x07, 0x3e, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x34, 0x88, 0xf4, 0xb3, 0x07, 0x01, 0xc2, 0xf4, 0xb3,
	0x07, 0x0e, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0xc2, 0xf4, 0xb3, 0x07, 0x17, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x22, 0x81, 0x02, 0x0a,
	0x08, 0x47, 0x43, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xf2,
	0xf8, 0xb3, 0x07, 0x2d, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x36, 0xfa, 0xf8, 0xb3, 0x07, 0x31, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x27, 0xc2, 0xf4, 0xb3, 0x07, 0x0a, 0x0a, 0x03,
	0x63, 0x6c, 0x69, 0x12, 0x03, 0x67, 0x63, 0x70, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x03, 0x67, 0x63, 0x70,
	0x22, 0x9c, 0x03, 0x0a, 0x11, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07,
	0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8,
	0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x70, 0xfa,
	0xf8, 0xb3, 0x07, 0x6b, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x61, 0xc2, 0xf4,
	0xb3, 0x07, 0x13, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0xa1, 0x05, 0x0a, 0x0d, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3,
	0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x41, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0xf2, 0xf8, 0xb3, 0x07, 0x32, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07,
	0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8,
	0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x64, 0xfa,
	0xf8, 0xb3, 0x07, 0x5f, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x55, 0xc2, 0xf4,
	0xb3, 0x07, 0x0f, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x4c, 0x53, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xc2,
	0xf4, 0xb3, 0x07, 0x1f, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x6c, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x0f, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3,
	0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07,
	0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2,
	0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x6a,
	0xfa, 0xf8, 0xb3, 0x07, 0x65, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x5b, 0xc2,
	0xf4, 0xb3, 0x07, 0x11, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0xc2, 0xf4, 0xb3, 0x07, 0x21, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6d, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69,
	0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_secret_store_types_proto_rawDescOnce sync.Once
	file_secret_store_types_proto_rawDescData = file_secret_store_types_proto_rawDesc
)

func file_secret_store_types_proto_rawDescGZIP() []byte {
	file_secret_store_types_proto_rawDescOnce.Do(func() {
		file_secret_store_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_secret_store_types_proto_rawDescData)
	})
	return file_secret_store_types_proto_rawDescData
}

var file_secret_store_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_secret_store_types_proto_goTypes = []interface{}{
	(*SecretStore)(nil),                  // 0: v1.SecretStore
	(*AWSStore)(nil),                     // 1: v1.AWSStore
	(*AzureStore)(nil),                   // 2: v1.AzureStore
	(*CyberarkConjurStore)(nil),          // 3: v1.CyberarkConjurStore
	(*CyberarkPAMExperimentalStore)(nil), // 4: v1.CyberarkPAMExperimentalStore
	(*DelineaStore)(nil),                 // 5: v1.DelineaStore
	(*GCPStore)(nil),                     // 6: v1.GCPStore
	(*VaultAppRoleStore)(nil),            // 7: v1.VaultAppRoleStore
	(*VaultTLSStore)(nil),                // 8: v1.VaultTLSStore
	(*VaultTokenStore)(nil),              // 9: v1.VaultTokenStore
	(*Tags)(nil),                         // 10: v1.Tags
}
var file_secret_store_types_proto_depIdxs = []int32{
	1,  // 0: v1.SecretStore.aws:type_name -> v1.AWSStore
	2,  // 1: v1.SecretStore.azure:type_name -> v1.AzureStore
	3,  // 2: v1.SecretStore.cyberark_conjur:type_name -> v1.CyberarkConjurStore
	4,  // 3: v1.SecretStore.cyberark_pam_experimental:type_name -> v1.CyberarkPAMExperimentalStore
	5,  // 4: v1.SecretStore.delinea:type_name -> v1.DelineaStore
	6,  // 5: v1.SecretStore.gcp:type_name -> v1.GCPStore
	7,  // 6: v1.SecretStore.vault_app_role:type_name -> v1.VaultAppRoleStore
	8,  // 7: v1.SecretStore.vault_tls:type_name -> v1.VaultTLSStore
	9,  // 8: v1.SecretStore.vault_token:type_name -> v1.VaultTokenStore
	10, // 9: v1.AWSStore.tags:type_name -> v1.Tags
	10, // 10: v1.AzureStore.tags:type_name -> v1.Tags
	10, // 11: v1.CyberarkConjurStore.tags:type_name -> v1.Tags
	10, // 12: v1.CyberarkPAMExperimentalStore.tags:type_name -> v1.Tags
	10, // 13: v1.DelineaStore.tags:type_name -> v1.Tags
	10, // 14: v1.GCPStore.tags:type_name -> v1.Tags
	10, // 15: v1.VaultAppRoleStore.tags:type_name -> v1.Tags
	10, // 16: v1.VaultTLSStore.tags:type_name -> v1.Tags
	10, // 17: v1.VaultTokenStore.tags:type_name -> v1.Tags
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_secret_store_types_proto_init() }
func file_secret_store_types_proto_init() {
	if File_secret_store_types_proto != nil {
		return
	}
	file_options_proto_init()
	file_tags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_secret_store_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyberarkConjurStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyberarkPAMExperimentalStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelineaStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAppRoleStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTLSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTokenStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secret_store_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SecretStore_Aws)(nil),
		(*SecretStore_Azure)(nil),
		(*SecretStore_CyberarkConjur)(nil),
		(*SecretStore_CyberarkPamExperimental)(nil),
		(*SecretStore_Delinea)(nil),
		(*SecretStore_Gcp)(nil),
		(*SecretStore_VaultAppRole)(nil),
		(*SecretStore_VaultTls)(nil),
		(*SecretStore_VaultToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secret_store_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_secret_store_types_proto_goTypes,
		DependencyIndexes: file_secret_store_types_proto_depIdxs,
		MessageInfos:      file_secret_store_types_proto_msgTypes,
	}.Build()
	File_secret_store_types_proto = out.File
	file_secret_store_types_proto_rawDesc = nil
	file_secret_store_types_proto_goTypes = nil
	file_secret_store_types_proto_depIdxs = nil
}
