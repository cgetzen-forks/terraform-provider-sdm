// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SecretStoresClient is the client API for SecretStores service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretStoresClient interface {
	Create(ctx context.Context, in *SecretStoreCreateRequest, opts ...grpc.CallOption) (*SecretStoreCreateResponse, error)
	// Get reads one SecretStore by ID.
	Get(ctx context.Context, in *SecretStoreGetRequest, opts ...grpc.CallOption) (*SecretStoreGetResponse, error)
	// Update replaces all the fields of a SecretStore by ID.
	Update(ctx context.Context, in *SecretStoreUpdateRequest, opts ...grpc.CallOption) (*SecretStoreUpdateResponse, error)
	// Delete removes a SecretStore by ID.
	Delete(ctx context.Context, in *SecretStoreDeleteRequest, opts ...grpc.CallOption) (*SecretStoreDeleteResponse, error)
	// List gets a list of SecretStores matching a given set of criteria.
	List(ctx context.Context, in *SecretStoreListRequest, opts ...grpc.CallOption) (*SecretStoreListResponse, error)
}

type secretStoresClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretStoresClient(cc grpc.ClientConnInterface) SecretStoresClient {
	return &secretStoresClient{cc}
}

func (c *secretStoresClient) Create(ctx context.Context, in *SecretStoreCreateRequest, opts ...grpc.CallOption) (*SecretStoreCreateResponse, error) {
	out := new(SecretStoreCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretStores/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoresClient) Get(ctx context.Context, in *SecretStoreGetRequest, opts ...grpc.CallOption) (*SecretStoreGetResponse, error) {
	out := new(SecretStoreGetResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretStores/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoresClient) Update(ctx context.Context, in *SecretStoreUpdateRequest, opts ...grpc.CallOption) (*SecretStoreUpdateResponse, error) {
	out := new(SecretStoreUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretStores/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoresClient) Delete(ctx context.Context, in *SecretStoreDeleteRequest, opts ...grpc.CallOption) (*SecretStoreDeleteResponse, error) {
	out := new(SecretStoreDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretStores/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoresClient) List(ctx context.Context, in *SecretStoreListRequest, opts ...grpc.CallOption) (*SecretStoreListResponse, error) {
	out := new(SecretStoreListResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretStores/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretStoresServer is the server API for SecretStores service.
// All implementations must embed UnimplementedSecretStoresServer
// for forward compatibility
type SecretStoresServer interface {
	Create(context.Context, *SecretStoreCreateRequest) (*SecretStoreCreateResponse, error)
	// Get reads one SecretStore by ID.
	Get(context.Context, *SecretStoreGetRequest) (*SecretStoreGetResponse, error)
	// Update replaces all the fields of a SecretStore by ID.
	Update(context.Context, *SecretStoreUpdateRequest) (*SecretStoreUpdateResponse, error)
	// Delete removes a SecretStore by ID.
	Delete(context.Context, *SecretStoreDeleteRequest) (*SecretStoreDeleteResponse, error)
	// List gets a list of SecretStores matching a given set of criteria.
	List(context.Context, *SecretStoreListRequest) (*SecretStoreListResponse, error)
	mustEmbedUnimplementedSecretStoresServer()
}

// UnimplementedSecretStoresServer must be embedded to have forward compatible implementations.
type UnimplementedSecretStoresServer struct {
}

func (UnimplementedSecretStoresServer) Create(context.Context, *SecretStoreCreateRequest) (*SecretStoreCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretStoresServer) Get(context.Context, *SecretStoreGetRequest) (*SecretStoreGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretStoresServer) Update(context.Context, *SecretStoreUpdateRequest) (*SecretStoreUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSecretStoresServer) Delete(context.Context, *SecretStoreDeleteRequest) (*SecretStoreDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretStoresServer) List(context.Context, *SecretStoreListRequest) (*SecretStoreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretStoresServer) mustEmbedUnimplementedSecretStoresServer() {}

// UnsafeSecretStoresServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretStoresServer will
// result in compilation errors.
type UnsafeSecretStoresServer interface {
	mustEmbedUnimplementedSecretStoresServer()
}

func RegisterSecretStoresServer(s grpc.ServiceRegistrar, srv SecretStoresServer) {
	s.RegisterService(&_SecretStores_serviceDesc, srv)
}

func _SecretStores_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoresServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretStores/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoresServer).Create(ctx, req.(*SecretStoreCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStores_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoresServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretStores/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoresServer).Get(ctx, req.(*SecretStoreGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStores_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoresServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretStores/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoresServer).Update(ctx, req.(*SecretStoreUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStores_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoresServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretStores/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoresServer).Delete(ctx, req.(*SecretStoreDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStores_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoresServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretStores/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoresServer).List(ctx, req.(*SecretStoreListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretStores_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SecretStores",
	HandlerType: (*SecretStoresServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SecretStores_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretStores_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SecretStores_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretStores_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SecretStores_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret_stores.proto",
}
