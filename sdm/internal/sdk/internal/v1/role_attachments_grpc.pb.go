// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RoleAttachmentsClient is the client API for RoleAttachments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Deprecated: Do not use.
type RoleAttachmentsClient interface {
	// Deprecated: Do not use.
	// Create registers a new RoleAttachment.
	//
	// Deprecated: use multi-role instead.
	Create(ctx context.Context, in *RoleAttachmentCreateRequest, opts ...grpc.CallOption) (*RoleAttachmentCreateResponse, error)
	// Deprecated: Do not use.
	// Get reads one RoleAttachment by ID.
	//
	// Deprecated: use multi-role instead.
	Get(ctx context.Context, in *RoleAttachmentGetRequest, opts ...grpc.CallOption) (*RoleAttachmentGetResponse, error)
	// Deprecated: Do not use.
	// Delete removes a RoleAttachment by ID.
	//
	// Deprecated: use multi-role instead.
	Delete(ctx context.Context, in *RoleAttachmentDeleteRequest, opts ...grpc.CallOption) (*RoleAttachmentDeleteResponse, error)
	// Deprecated: Do not use.
	// List gets a list of RoleAttachments matching a given set of criteria.
	//
	// Deprecated: use multi-role instead.
	List(ctx context.Context, in *RoleAttachmentListRequest, opts ...grpc.CallOption) (*RoleAttachmentListResponse, error)
}

type roleAttachmentsClient struct {
	cc grpc.ClientConnInterface
}

// Deprecated: Do not use.
func NewRoleAttachmentsClient(cc grpc.ClientConnInterface) RoleAttachmentsClient {
	return &roleAttachmentsClient{cc}
}

// Deprecated: Do not use.
func (c *roleAttachmentsClient) Create(ctx context.Context, in *RoleAttachmentCreateRequest, opts ...grpc.CallOption) (*RoleAttachmentCreateResponse, error) {
	out := new(RoleAttachmentCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleAttachments/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *roleAttachmentsClient) Get(ctx context.Context, in *RoleAttachmentGetRequest, opts ...grpc.CallOption) (*RoleAttachmentGetResponse, error) {
	out := new(RoleAttachmentGetResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleAttachments/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *roleAttachmentsClient) Delete(ctx context.Context, in *RoleAttachmentDeleteRequest, opts ...grpc.CallOption) (*RoleAttachmentDeleteResponse, error) {
	out := new(RoleAttachmentDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleAttachments/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *roleAttachmentsClient) List(ctx context.Context, in *RoleAttachmentListRequest, opts ...grpc.CallOption) (*RoleAttachmentListResponse, error) {
	out := new(RoleAttachmentListResponse)
	err := c.cc.Invoke(ctx, "/v1.RoleAttachments/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleAttachmentsServer is the server API for RoleAttachments service.
// All implementations must embed UnimplementedRoleAttachmentsServer
// for forward compatibility
//
// Deprecated: Do not use.
type RoleAttachmentsServer interface {
	// Deprecated: Do not use.
	// Create registers a new RoleAttachment.
	//
	// Deprecated: use multi-role instead.
	Create(context.Context, *RoleAttachmentCreateRequest) (*RoleAttachmentCreateResponse, error)
	// Deprecated: Do not use.
	// Get reads one RoleAttachment by ID.
	//
	// Deprecated: use multi-role instead.
	Get(context.Context, *RoleAttachmentGetRequest) (*RoleAttachmentGetResponse, error)
	// Deprecated: Do not use.
	// Delete removes a RoleAttachment by ID.
	//
	// Deprecated: use multi-role instead.
	Delete(context.Context, *RoleAttachmentDeleteRequest) (*RoleAttachmentDeleteResponse, error)
	// Deprecated: Do not use.
	// List gets a list of RoleAttachments matching a given set of criteria.
	//
	// Deprecated: use multi-role instead.
	List(context.Context, *RoleAttachmentListRequest) (*RoleAttachmentListResponse, error)
	mustEmbedUnimplementedRoleAttachmentsServer()
}

// UnimplementedRoleAttachmentsServer must be embedded to have forward compatible implementations.
type UnimplementedRoleAttachmentsServer struct {
}

func (UnimplementedRoleAttachmentsServer) Create(context.Context, *RoleAttachmentCreateRequest) (*RoleAttachmentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleAttachmentsServer) Get(context.Context, *RoleAttachmentGetRequest) (*RoleAttachmentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoleAttachmentsServer) Delete(context.Context, *RoleAttachmentDeleteRequest) (*RoleAttachmentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleAttachmentsServer) List(context.Context, *RoleAttachmentListRequest) (*RoleAttachmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRoleAttachmentsServer) mustEmbedUnimplementedRoleAttachmentsServer() {}

// UnsafeRoleAttachmentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleAttachmentsServer will
// result in compilation errors.
type UnsafeRoleAttachmentsServer interface {
	mustEmbedUnimplementedRoleAttachmentsServer()
}

// Deprecated: Do not use.
func RegisterRoleAttachmentsServer(s grpc.ServiceRegistrar, srv RoleAttachmentsServer) {
	s.RegisterService(&_RoleAttachments_serviceDesc, srv)
}

func _RoleAttachments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAttachmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleAttachmentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleAttachments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleAttachmentsServer).Create(ctx, req.(*RoleAttachmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleAttachments_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAttachmentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleAttachmentsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleAttachments/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleAttachmentsServer).Get(ctx, req.(*RoleAttachmentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleAttachments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAttachmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleAttachmentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleAttachments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleAttachmentsServer).Delete(ctx, req.(*RoleAttachmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleAttachments_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAttachmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleAttachmentsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RoleAttachments/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleAttachmentsServer).List(ctx, req.(*RoleAttachmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleAttachments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RoleAttachments",
	HandlerType: (*RoleAttachmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoleAttachments_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoleAttachments_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoleAttachments_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoleAttachments_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role_attachments.proto",
}
