// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountChannelOverridesClient is the client API for AccountChannelOverrides service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountChannelOverridesClient interface {
	// Create pins an account to a channel. If a pin is already present, it will remove the existing
	// pin.
	Create(ctx context.Context, in *AccountChannelOverrideCreateRequest, opts ...grpc.CallOption) (*AccountChannelOverrideCreateResponse, error)
	// List is currently unimplemented.
	// TODO: enable sdmctl commands to use this to see what pins are currently in place
	List(ctx context.Context, in *AccountChannelOverrideListRequest, opts ...grpc.CallOption) (*AccountChannelOverrideListResponse, error)
	// Delete removes all overrides for a given account (at most one). If none are present,
	// it will return that it did not change any rows.
	Delete(ctx context.Context, in *AccountChannelOverrideDeleteRequest, opts ...grpc.CallOption) (*AccountChannelOverrideDeleteResponse, error)
}

type accountChannelOverridesClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountChannelOverridesClient(cc grpc.ClientConnInterface) AccountChannelOverridesClient {
	return &accountChannelOverridesClient{cc}
}

func (c *accountChannelOverridesClient) Create(ctx context.Context, in *AccountChannelOverrideCreateRequest, opts ...grpc.CallOption) (*AccountChannelOverrideCreateResponse, error) {
	out := new(AccountChannelOverrideCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountChannelOverrides/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountChannelOverridesClient) List(ctx context.Context, in *AccountChannelOverrideListRequest, opts ...grpc.CallOption) (*AccountChannelOverrideListResponse, error) {
	out := new(AccountChannelOverrideListResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountChannelOverrides/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountChannelOverridesClient) Delete(ctx context.Context, in *AccountChannelOverrideDeleteRequest, opts ...grpc.CallOption) (*AccountChannelOverrideDeleteResponse, error) {
	out := new(AccountChannelOverrideDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountChannelOverrides/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountChannelOverridesServer is the server API for AccountChannelOverrides service.
// All implementations must embed UnimplementedAccountChannelOverridesServer
// for forward compatibility
type AccountChannelOverridesServer interface {
	// Create pins an account to a channel. If a pin is already present, it will remove the existing
	// pin.
	Create(context.Context, *AccountChannelOverrideCreateRequest) (*AccountChannelOverrideCreateResponse, error)
	// List is currently unimplemented.
	// TODO: enable sdmctl commands to use this to see what pins are currently in place
	List(context.Context, *AccountChannelOverrideListRequest) (*AccountChannelOverrideListResponse, error)
	// Delete removes all overrides for a given account (at most one). If none are present,
	// it will return that it did not change any rows.
	Delete(context.Context, *AccountChannelOverrideDeleteRequest) (*AccountChannelOverrideDeleteResponse, error)
	mustEmbedUnimplementedAccountChannelOverridesServer()
}

// UnimplementedAccountChannelOverridesServer must be embedded to have forward compatible implementations.
type UnimplementedAccountChannelOverridesServer struct {
}

func (UnimplementedAccountChannelOverridesServer) Create(context.Context, *AccountChannelOverrideCreateRequest) (*AccountChannelOverrideCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountChannelOverridesServer) List(context.Context, *AccountChannelOverrideListRequest) (*AccountChannelOverrideListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountChannelOverridesServer) Delete(context.Context, *AccountChannelOverrideDeleteRequest) (*AccountChannelOverrideDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountChannelOverridesServer) mustEmbedUnimplementedAccountChannelOverridesServer() {
}

// UnsafeAccountChannelOverridesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountChannelOverridesServer will
// result in compilation errors.
type UnsafeAccountChannelOverridesServer interface {
	mustEmbedUnimplementedAccountChannelOverridesServer()
}

func RegisterAccountChannelOverridesServer(s grpc.ServiceRegistrar, srv AccountChannelOverridesServer) {
	s.RegisterService(&_AccountChannelOverrides_serviceDesc, srv)
}

func _AccountChannelOverrides_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChannelOverrideCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountChannelOverridesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountChannelOverrides/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountChannelOverridesServer).Create(ctx, req.(*AccountChannelOverrideCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountChannelOverrides_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChannelOverrideListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountChannelOverridesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountChannelOverrides/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountChannelOverridesServer).List(ctx, req.(*AccountChannelOverrideListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountChannelOverrides_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChannelOverrideDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountChannelOverridesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountChannelOverrides/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountChannelOverridesServer).Delete(ctx, req.(*AccountChannelOverrideDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountChannelOverrides_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AccountChannelOverrides",
	HandlerType: (*AccountChannelOverridesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountChannelOverrides_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountChannelOverrides_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountChannelOverrides_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_channel_overrides.proto",
}
