// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountsHistoryClient is the client API for AccountsHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsHistoryClient interface {
	// List gets a list of AccountHistory records matching a given set of criteria.
	List(ctx context.Context, in *AccountHistoryListRequest, opts ...grpc.CallOption) (*AccountHistoryListResponse, error)
}

type accountsHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsHistoryClient(cc grpc.ClientConnInterface) AccountsHistoryClient {
	return &accountsHistoryClient{cc}
}

func (c *accountsHistoryClient) List(ctx context.Context, in *AccountHistoryListRequest, opts ...grpc.CallOption) (*AccountHistoryListResponse, error) {
	out := new(AccountHistoryListResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountsHistory/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsHistoryServer is the server API for AccountsHistory service.
// All implementations must embed UnimplementedAccountsHistoryServer
// for forward compatibility
type AccountsHistoryServer interface {
	// List gets a list of AccountHistory records matching a given set of criteria.
	List(context.Context, *AccountHistoryListRequest) (*AccountHistoryListResponse, error)
	mustEmbedUnimplementedAccountsHistoryServer()
}

// UnimplementedAccountsHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsHistoryServer struct {
}

func (UnimplementedAccountsHistoryServer) List(context.Context, *AccountHistoryListRequest) (*AccountHistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsHistoryServer) mustEmbedUnimplementedAccountsHistoryServer() {}

// UnsafeAccountsHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsHistoryServer will
// result in compilation errors.
type UnsafeAccountsHistoryServer interface {
	mustEmbedUnimplementedAccountsHistoryServer()
}

func RegisterAccountsHistoryServer(s grpc.ServiceRegistrar, srv AccountsHistoryServer) {
	s.RegisterService(&_AccountsHistory_serviceDesc, srv)
}

func _AccountsHistory_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountHistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsHistoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountsHistory/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsHistoryServer).List(ctx, req.(*AccountHistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountsHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AccountsHistory",
	HandlerType: (*AccountsHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AccountsHistory_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts_history.proto",
}
