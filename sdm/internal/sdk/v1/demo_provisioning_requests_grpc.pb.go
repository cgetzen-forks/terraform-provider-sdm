// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DemoProvisioningRequestsClient is the client API for DemoProvisioningRequests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoProvisioningRequestsClient interface {
	// Create
	Create(ctx context.Context, in *DemoProvisioningRequestCreateRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestCreateResponse, error)
	// ListForOrganization gets a list of DemoProvisioningRequests in your organization
	// matching a given set of criteria. This operation can be done by account
	// administrators.
	ListForOrganization(ctx context.Context, in *DemoProvisioningRequestListForOrganizationRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestListForOrganizationResponse, error)
	// Delete deletes a DemoProvisioningRequest.
	Delete(ctx context.Context, in *DemoProvisioningRequestDeleteRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestDeleteResponse, error)
	// ListAll gets a list of DemoProvisioningRequests across all orgs matching a given
	// set of criteria. This operation can only be done by operators and the
	// trial provisioner.
	ListAll(ctx context.Context, in *DemoProvisioningRequestListAllRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestListAllResponse, error)
	// Update updates a DemoProvisioningRequest.
	Update(ctx context.Context, in *DemoProvisioningRequestUpdateRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestUpdateResponse, error)
}

type demoProvisioningRequestsClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoProvisioningRequestsClient(cc grpc.ClientConnInterface) DemoProvisioningRequestsClient {
	return &demoProvisioningRequestsClient{cc}
}

func (c *demoProvisioningRequestsClient) Create(ctx context.Context, in *DemoProvisioningRequestCreateRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestCreateResponse, error) {
	out := new(DemoProvisioningRequestCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.DemoProvisioningRequests/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoProvisioningRequestsClient) ListForOrganization(ctx context.Context, in *DemoProvisioningRequestListForOrganizationRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestListForOrganizationResponse, error) {
	out := new(DemoProvisioningRequestListForOrganizationResponse)
	err := c.cc.Invoke(ctx, "/v1.DemoProvisioningRequests/ListForOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoProvisioningRequestsClient) Delete(ctx context.Context, in *DemoProvisioningRequestDeleteRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestDeleteResponse, error) {
	out := new(DemoProvisioningRequestDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.DemoProvisioningRequests/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoProvisioningRequestsClient) ListAll(ctx context.Context, in *DemoProvisioningRequestListAllRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestListAllResponse, error) {
	out := new(DemoProvisioningRequestListAllResponse)
	err := c.cc.Invoke(ctx, "/v1.DemoProvisioningRequests/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoProvisioningRequestsClient) Update(ctx context.Context, in *DemoProvisioningRequestUpdateRequest, opts ...grpc.CallOption) (*DemoProvisioningRequestUpdateResponse, error) {
	out := new(DemoProvisioningRequestUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.DemoProvisioningRequests/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoProvisioningRequestsServer is the server API for DemoProvisioningRequests service.
// All implementations must embed UnimplementedDemoProvisioningRequestsServer
// for forward compatibility
type DemoProvisioningRequestsServer interface {
	// Create
	Create(context.Context, *DemoProvisioningRequestCreateRequest) (*DemoProvisioningRequestCreateResponse, error)
	// ListForOrganization gets a list of DemoProvisioningRequests in your organization
	// matching a given set of criteria. This operation can be done by account
	// administrators.
	ListForOrganization(context.Context, *DemoProvisioningRequestListForOrganizationRequest) (*DemoProvisioningRequestListForOrganizationResponse, error)
	// Delete deletes a DemoProvisioningRequest.
	Delete(context.Context, *DemoProvisioningRequestDeleteRequest) (*DemoProvisioningRequestDeleteResponse, error)
	// ListAll gets a list of DemoProvisioningRequests across all orgs matching a given
	// set of criteria. This operation can only be done by operators and the
	// trial provisioner.
	ListAll(context.Context, *DemoProvisioningRequestListAllRequest) (*DemoProvisioningRequestListAllResponse, error)
	// Update updates a DemoProvisioningRequest.
	Update(context.Context, *DemoProvisioningRequestUpdateRequest) (*DemoProvisioningRequestUpdateResponse, error)
	mustEmbedUnimplementedDemoProvisioningRequestsServer()
}

// UnimplementedDemoProvisioningRequestsServer must be embedded to have forward compatible implementations.
type UnimplementedDemoProvisioningRequestsServer struct {
}

func (UnimplementedDemoProvisioningRequestsServer) Create(context.Context, *DemoProvisioningRequestCreateRequest) (*DemoProvisioningRequestCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDemoProvisioningRequestsServer) ListForOrganization(context.Context, *DemoProvisioningRequestListForOrganizationRequest) (*DemoProvisioningRequestListForOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListForOrganization not implemented")
}
func (UnimplementedDemoProvisioningRequestsServer) Delete(context.Context, *DemoProvisioningRequestDeleteRequest) (*DemoProvisioningRequestDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDemoProvisioningRequestsServer) ListAll(context.Context, *DemoProvisioningRequestListAllRequest) (*DemoProvisioningRequestListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedDemoProvisioningRequestsServer) Update(context.Context, *DemoProvisioningRequestUpdateRequest) (*DemoProvisioningRequestUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDemoProvisioningRequestsServer) mustEmbedUnimplementedDemoProvisioningRequestsServer() {
}

// UnsafeDemoProvisioningRequestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoProvisioningRequestsServer will
// result in compilation errors.
type UnsafeDemoProvisioningRequestsServer interface {
	mustEmbedUnimplementedDemoProvisioningRequestsServer()
}

func RegisterDemoProvisioningRequestsServer(s grpc.ServiceRegistrar, srv DemoProvisioningRequestsServer) {
	s.RegisterService(&_DemoProvisioningRequests_serviceDesc, srv)
}

func _DemoProvisioningRequests_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoProvisioningRequestCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProvisioningRequestsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DemoProvisioningRequests/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProvisioningRequestsServer).Create(ctx, req.(*DemoProvisioningRequestCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoProvisioningRequests_ListForOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoProvisioningRequestListForOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProvisioningRequestsServer).ListForOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DemoProvisioningRequests/ListForOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProvisioningRequestsServer).ListForOrganization(ctx, req.(*DemoProvisioningRequestListForOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoProvisioningRequests_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoProvisioningRequestDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProvisioningRequestsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DemoProvisioningRequests/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProvisioningRequestsServer).Delete(ctx, req.(*DemoProvisioningRequestDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoProvisioningRequests_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoProvisioningRequestListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProvisioningRequestsServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DemoProvisioningRequests/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProvisioningRequestsServer).ListAll(ctx, req.(*DemoProvisioningRequestListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoProvisioningRequests_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoProvisioningRequestUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoProvisioningRequestsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DemoProvisioningRequests/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoProvisioningRequestsServer).Update(ctx, req.(*DemoProvisioningRequestUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DemoProvisioningRequests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DemoProvisioningRequests",
	HandlerType: (*DemoProvisioningRequestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DemoProvisioningRequests_Create_Handler,
		},
		{
			MethodName: "ListForOrganization",
			Handler:    _DemoProvisioningRequests_ListForOrganization_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DemoProvisioningRequests_Delete_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _DemoProvisioningRequests_ListAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DemoProvisioningRequests_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo_provisioning_requests.proto",
}
