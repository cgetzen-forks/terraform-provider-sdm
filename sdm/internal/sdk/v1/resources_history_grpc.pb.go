// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResourcesHistoryClient is the client API for ResourcesHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesHistoryClient interface {
	// List gets a list of ResourceHistory records matching a given set of criteria.
	List(ctx context.Context, in *ResourceHistoryListRequest, opts ...grpc.CallOption) (*ResourceHistoryListResponse, error)
}

type resourcesHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesHistoryClient(cc grpc.ClientConnInterface) ResourcesHistoryClient {
	return &resourcesHistoryClient{cc}
}

func (c *resourcesHistoryClient) List(ctx context.Context, in *ResourceHistoryListRequest, opts ...grpc.CallOption) (*ResourceHistoryListResponse, error) {
	out := new(ResourceHistoryListResponse)
	err := c.cc.Invoke(ctx, "/v1.ResourcesHistory/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesHistoryServer is the server API for ResourcesHistory service.
// All implementations must embed UnimplementedResourcesHistoryServer
// for forward compatibility
type ResourcesHistoryServer interface {
	// List gets a list of ResourceHistory records matching a given set of criteria.
	List(context.Context, *ResourceHistoryListRequest) (*ResourceHistoryListResponse, error)
	mustEmbedUnimplementedResourcesHistoryServer()
}

// UnimplementedResourcesHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesHistoryServer struct {
}

func (UnimplementedResourcesHistoryServer) List(context.Context, *ResourceHistoryListRequest) (*ResourceHistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourcesHistoryServer) mustEmbedUnimplementedResourcesHistoryServer() {}

// UnsafeResourcesHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesHistoryServer will
// result in compilation errors.
type UnsafeResourcesHistoryServer interface {
	mustEmbedUnimplementedResourcesHistoryServer()
}

func RegisterResourcesHistoryServer(s grpc.ServiceRegistrar, srv ResourcesHistoryServer) {
	s.RegisterService(&_ResourcesHistory_serviceDesc, srv)
}

func _ResourcesHistory_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceHistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesHistoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ResourcesHistory/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesHistoryServer).List(ctx, req.(*ResourceHistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourcesHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ResourcesHistory",
	HandlerType: (*ResourcesHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ResourcesHistory_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources_history.proto",
}
