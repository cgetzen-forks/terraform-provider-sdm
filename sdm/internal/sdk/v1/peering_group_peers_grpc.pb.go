// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeeringGroupPeersClient is the client API for PeeringGroupPeers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeeringGroupPeersClient interface {
	// Create links two peering groups.
	Create(ctx context.Context, in *PeeringGroupPeerCreateRequest, opts ...grpc.CallOption) (*PeeringGroupPeerCreateResponse, error)
	// Delete unlinks two peering groups.
	Delete(ctx context.Context, in *PeeringGroupPeerDeleteRequest, opts ...grpc.CallOption) (*PeeringGroupPeerDeleteResponse, error)
	// Get reads the information of one peering group link.
	Get(ctx context.Context, in *PeeringGroupPeerGetRequest, opts ...grpc.CallOption) (*PeeringGroupPeerGetResponse, error)
	// List gets a list of peering group links.
	List(ctx context.Context, in *PeeringGroupPeerListRequest, opts ...grpc.CallOption) (*PeeringGroupPeerListResponse, error)
}

type peeringGroupPeersClient struct {
	cc grpc.ClientConnInterface
}

func NewPeeringGroupPeersClient(cc grpc.ClientConnInterface) PeeringGroupPeersClient {
	return &peeringGroupPeersClient{cc}
}

func (c *peeringGroupPeersClient) Create(ctx context.Context, in *PeeringGroupPeerCreateRequest, opts ...grpc.CallOption) (*PeeringGroupPeerCreateResponse, error) {
	out := new(PeeringGroupPeerCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupPeers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupPeersClient) Delete(ctx context.Context, in *PeeringGroupPeerDeleteRequest, opts ...grpc.CallOption) (*PeeringGroupPeerDeleteResponse, error) {
	out := new(PeeringGroupPeerDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupPeers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupPeersClient) Get(ctx context.Context, in *PeeringGroupPeerGetRequest, opts ...grpc.CallOption) (*PeeringGroupPeerGetResponse, error) {
	out := new(PeeringGroupPeerGetResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupPeers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupPeersClient) List(ctx context.Context, in *PeeringGroupPeerListRequest, opts ...grpc.CallOption) (*PeeringGroupPeerListResponse, error) {
	out := new(PeeringGroupPeerListResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupPeers/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeringGroupPeersServer is the server API for PeeringGroupPeers service.
// All implementations must embed UnimplementedPeeringGroupPeersServer
// for forward compatibility
type PeeringGroupPeersServer interface {
	// Create links two peering groups.
	Create(context.Context, *PeeringGroupPeerCreateRequest) (*PeeringGroupPeerCreateResponse, error)
	// Delete unlinks two peering groups.
	Delete(context.Context, *PeeringGroupPeerDeleteRequest) (*PeeringGroupPeerDeleteResponse, error)
	// Get reads the information of one peering group link.
	Get(context.Context, *PeeringGroupPeerGetRequest) (*PeeringGroupPeerGetResponse, error)
	// List gets a list of peering group links.
	List(context.Context, *PeeringGroupPeerListRequest) (*PeeringGroupPeerListResponse, error)
	mustEmbedUnimplementedPeeringGroupPeersServer()
}

// UnimplementedPeeringGroupPeersServer must be embedded to have forward compatible implementations.
type UnimplementedPeeringGroupPeersServer struct {
}

func (UnimplementedPeeringGroupPeersServer) Create(context.Context, *PeeringGroupPeerCreateRequest) (*PeeringGroupPeerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPeeringGroupPeersServer) Delete(context.Context, *PeeringGroupPeerDeleteRequest) (*PeeringGroupPeerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPeeringGroupPeersServer) Get(context.Context, *PeeringGroupPeerGetRequest) (*PeeringGroupPeerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPeeringGroupPeersServer) List(context.Context, *PeeringGroupPeerListRequest) (*PeeringGroupPeerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPeeringGroupPeersServer) mustEmbedUnimplementedPeeringGroupPeersServer() {}

// UnsafePeeringGroupPeersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeeringGroupPeersServer will
// result in compilation errors.
type UnsafePeeringGroupPeersServer interface {
	mustEmbedUnimplementedPeeringGroupPeersServer()
}

func RegisterPeeringGroupPeersServer(s grpc.ServiceRegistrar, srv PeeringGroupPeersServer) {
	s.RegisterService(&_PeeringGroupPeers_serviceDesc, srv)
}

func _PeeringGroupPeers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupPeerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupPeersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupPeers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupPeersServer).Create(ctx, req.(*PeeringGroupPeerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupPeers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupPeerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupPeersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupPeers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupPeersServer).Delete(ctx, req.(*PeeringGroupPeerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupPeers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupPeerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupPeersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupPeers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupPeersServer).Get(ctx, req.(*PeeringGroupPeerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupPeers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupPeerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupPeersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupPeers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupPeersServer).List(ctx, req.(*PeeringGroupPeerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeeringGroupPeers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PeeringGroupPeers",
	HandlerType: (*PeeringGroupPeersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PeeringGroupPeers_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PeeringGroupPeers_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PeeringGroupPeers_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PeeringGroupPeers_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peering_group_peers.proto",
}
