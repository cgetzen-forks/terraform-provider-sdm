// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BuildsPrivateClient is the client API for BuildsPrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildsPrivateClient interface {
	// Create registers a new Build.
	Create(ctx context.Context, in *BuildCreateRequest, opts ...grpc.CallOption) (*BuildCreateResponse, error)
	// Get reads one Build by ID.
	Get(ctx context.Context, in *BuildGetRequest, opts ...grpc.CallOption) (*BuildGetResponse, error)
	// Update patches a Build by ID.
	Update(ctx context.Context, in *BuildUpdateRequest, opts ...grpc.CallOption) (*BuildUpdateResponse, error)
	// List gets a list of Access Rules matching a given set of criteria.
	List(ctx context.Context, in *BuildListRequest, opts ...grpc.CallOption) (*BuildListResponse, error)
}

type buildsPrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildsPrivateClient(cc grpc.ClientConnInterface) BuildsPrivateClient {
	return &buildsPrivateClient{cc}
}

func (c *buildsPrivateClient) Create(ctx context.Context, in *BuildCreateRequest, opts ...grpc.CallOption) (*BuildCreateResponse, error) {
	out := new(BuildCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildsPrivate/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPrivateClient) Get(ctx context.Context, in *BuildGetRequest, opts ...grpc.CallOption) (*BuildGetResponse, error) {
	out := new(BuildGetResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildsPrivate/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPrivateClient) Update(ctx context.Context, in *BuildUpdateRequest, opts ...grpc.CallOption) (*BuildUpdateResponse, error) {
	out := new(BuildUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildsPrivate/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildsPrivateClient) List(ctx context.Context, in *BuildListRequest, opts ...grpc.CallOption) (*BuildListResponse, error) {
	out := new(BuildListResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildsPrivate/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildsPrivateServer is the server API for BuildsPrivate service.
// All implementations must embed UnimplementedBuildsPrivateServer
// for forward compatibility
type BuildsPrivateServer interface {
	// Create registers a new Build.
	Create(context.Context, *BuildCreateRequest) (*BuildCreateResponse, error)
	// Get reads one Build by ID.
	Get(context.Context, *BuildGetRequest) (*BuildGetResponse, error)
	// Update patches a Build by ID.
	Update(context.Context, *BuildUpdateRequest) (*BuildUpdateResponse, error)
	// List gets a list of Access Rules matching a given set of criteria.
	List(context.Context, *BuildListRequest) (*BuildListResponse, error)
	mustEmbedUnimplementedBuildsPrivateServer()
}

// UnimplementedBuildsPrivateServer must be embedded to have forward compatible implementations.
type UnimplementedBuildsPrivateServer struct {
}

func (UnimplementedBuildsPrivateServer) Create(context.Context, *BuildCreateRequest) (*BuildCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBuildsPrivateServer) Get(context.Context, *BuildGetRequest) (*BuildGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBuildsPrivateServer) Update(context.Context, *BuildUpdateRequest) (*BuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBuildsPrivateServer) List(context.Context, *BuildListRequest) (*BuildListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBuildsPrivateServer) mustEmbedUnimplementedBuildsPrivateServer() {}

// UnsafeBuildsPrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildsPrivateServer will
// result in compilation errors.
type UnsafeBuildsPrivateServer interface {
	mustEmbedUnimplementedBuildsPrivateServer()
}

func RegisterBuildsPrivateServer(s grpc.ServiceRegistrar, srv BuildsPrivateServer) {
	s.RegisterService(&_BuildsPrivate_serviceDesc, srv)
}

func _BuildsPrivate_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsPrivateServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildsPrivate/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsPrivateServer).Create(ctx, req.(*BuildCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildsPrivate_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsPrivateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildsPrivate/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsPrivateServer).Get(ctx, req.(*BuildGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildsPrivate_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsPrivateServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildsPrivate/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsPrivateServer).Update(ctx, req.(*BuildUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildsPrivate_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildsPrivateServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildsPrivate/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildsPrivateServer).List(ctx, req.(*BuildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildsPrivate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BuildsPrivate",
	HandlerType: (*BuildsPrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BuildsPrivate_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BuildsPrivate_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BuildsPrivate_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BuildsPrivate_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "builds_private.proto",
}
