// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NodeChannelOverridesClient is the client API for NodeChannelOverrides service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeChannelOverridesClient interface {
	// Create pins a node to a channel. If a pin is already present, it will remove the existing
	// pin.
	Create(ctx context.Context, in *NodeChannelOverrideCreateRequest, opts ...grpc.CallOption) (*NodeChannelOverrideCreateResponse, error)
	// List is currently unimplemented.
	// TODO: enable sdmctl commands to use this to see what pins are currently in place
	List(ctx context.Context, in *NodeChannelOverrideListRequest, opts ...grpc.CallOption) (*NodeChannelOverrideListResponse, error)
	// Delete removes all overrides for a given node (at most one). If none are present,
	// it will return that it did not change any rows.
	Delete(ctx context.Context, in *NodeChannelOverrideDeleteRequest, opts ...grpc.CallOption) (*NodeChannelOverrideDeleteResponse, error)
}

type nodeChannelOverridesClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeChannelOverridesClient(cc grpc.ClientConnInterface) NodeChannelOverridesClient {
	return &nodeChannelOverridesClient{cc}
}

func (c *nodeChannelOverridesClient) Create(ctx context.Context, in *NodeChannelOverrideCreateRequest, opts ...grpc.CallOption) (*NodeChannelOverrideCreateResponse, error) {
	out := new(NodeChannelOverrideCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.NodeChannelOverrides/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeChannelOverridesClient) List(ctx context.Context, in *NodeChannelOverrideListRequest, opts ...grpc.CallOption) (*NodeChannelOverrideListResponse, error) {
	out := new(NodeChannelOverrideListResponse)
	err := c.cc.Invoke(ctx, "/v1.NodeChannelOverrides/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeChannelOverridesClient) Delete(ctx context.Context, in *NodeChannelOverrideDeleteRequest, opts ...grpc.CallOption) (*NodeChannelOverrideDeleteResponse, error) {
	out := new(NodeChannelOverrideDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.NodeChannelOverrides/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeChannelOverridesServer is the server API for NodeChannelOverrides service.
// All implementations must embed UnimplementedNodeChannelOverridesServer
// for forward compatibility
type NodeChannelOverridesServer interface {
	// Create pins a node to a channel. If a pin is already present, it will remove the existing
	// pin.
	Create(context.Context, *NodeChannelOverrideCreateRequest) (*NodeChannelOverrideCreateResponse, error)
	// List is currently unimplemented.
	// TODO: enable sdmctl commands to use this to see what pins are currently in place
	List(context.Context, *NodeChannelOverrideListRequest) (*NodeChannelOverrideListResponse, error)
	// Delete removes all overrides for a given node (at most one). If none are present,
	// it will return that it did not change any rows.
	Delete(context.Context, *NodeChannelOverrideDeleteRequest) (*NodeChannelOverrideDeleteResponse, error)
	mustEmbedUnimplementedNodeChannelOverridesServer()
}

// UnimplementedNodeChannelOverridesServer must be embedded to have forward compatible implementations.
type UnimplementedNodeChannelOverridesServer struct {
}

func (UnimplementedNodeChannelOverridesServer) Create(context.Context, *NodeChannelOverrideCreateRequest) (*NodeChannelOverrideCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNodeChannelOverridesServer) List(context.Context, *NodeChannelOverrideListRequest) (*NodeChannelOverrideListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNodeChannelOverridesServer) Delete(context.Context, *NodeChannelOverrideDeleteRequest) (*NodeChannelOverrideDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNodeChannelOverridesServer) mustEmbedUnimplementedNodeChannelOverridesServer() {}

// UnsafeNodeChannelOverridesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeChannelOverridesServer will
// result in compilation errors.
type UnsafeNodeChannelOverridesServer interface {
	mustEmbedUnimplementedNodeChannelOverridesServer()
}

func RegisterNodeChannelOverridesServer(s grpc.ServiceRegistrar, srv NodeChannelOverridesServer) {
	s.RegisterService(&_NodeChannelOverrides_serviceDesc, srv)
}

func _NodeChannelOverrides_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeChannelOverrideCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeChannelOverridesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NodeChannelOverrides/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeChannelOverridesServer).Create(ctx, req.(*NodeChannelOverrideCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeChannelOverrides_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeChannelOverrideListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeChannelOverridesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NodeChannelOverrides/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeChannelOverridesServer).List(ctx, req.(*NodeChannelOverrideListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeChannelOverrides_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeChannelOverrideDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeChannelOverridesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NodeChannelOverrides/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeChannelOverridesServer).Delete(ctx, req.(*NodeChannelOverrideDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeChannelOverrides_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NodeChannelOverrides",
	HandlerType: (*NodeChannelOverridesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NodeChannelOverrides_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodeChannelOverrides_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeChannelOverrides_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_channel_overrides.proto",
}
