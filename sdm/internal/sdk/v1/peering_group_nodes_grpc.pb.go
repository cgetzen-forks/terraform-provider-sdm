// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PeeringGroupNodesClient is the client API for PeeringGroupNodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeeringGroupNodesClient interface {
	// Create attaches a Node to a PeeringGroup
	Create(ctx context.Context, in *PeeringGroupNodeCreateRequest, opts ...grpc.CallOption) (*PeeringGroupNodeCreateResponse, error)
	// Delete detaches a Node to a PeeringGroup.
	Delete(ctx context.Context, in *PeeringGroupNodeDeleteRequest, opts ...grpc.CallOption) (*PeeringGroupNodeDeleteResponse, error)
	// Get reads the information of one peering group to node attachment.
	Get(ctx context.Context, in *PeeringGroupNodeGetRequest, opts ...grpc.CallOption) (*PeeringGroupNodeGetResponse, error)
	// List gets a list of peering group node attachments.
	List(ctx context.Context, in *PeeringGroupNodeListRequest, opts ...grpc.CallOption) (*PeeringGroupNodeListResponse, error)
}

type peeringGroupNodesClient struct {
	cc grpc.ClientConnInterface
}

func NewPeeringGroupNodesClient(cc grpc.ClientConnInterface) PeeringGroupNodesClient {
	return &peeringGroupNodesClient{cc}
}

func (c *peeringGroupNodesClient) Create(ctx context.Context, in *PeeringGroupNodeCreateRequest, opts ...grpc.CallOption) (*PeeringGroupNodeCreateResponse, error) {
	out := new(PeeringGroupNodeCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupNodes/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupNodesClient) Delete(ctx context.Context, in *PeeringGroupNodeDeleteRequest, opts ...grpc.CallOption) (*PeeringGroupNodeDeleteResponse, error) {
	out := new(PeeringGroupNodeDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupNodes/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupNodesClient) Get(ctx context.Context, in *PeeringGroupNodeGetRequest, opts ...grpc.CallOption) (*PeeringGroupNodeGetResponse, error) {
	out := new(PeeringGroupNodeGetResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupNodes/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peeringGroupNodesClient) List(ctx context.Context, in *PeeringGroupNodeListRequest, opts ...grpc.CallOption) (*PeeringGroupNodeListResponse, error) {
	out := new(PeeringGroupNodeListResponse)
	err := c.cc.Invoke(ctx, "/v1.PeeringGroupNodes/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeeringGroupNodesServer is the server API for PeeringGroupNodes service.
// All implementations must embed UnimplementedPeeringGroupNodesServer
// for forward compatibility
type PeeringGroupNodesServer interface {
	// Create attaches a Node to a PeeringGroup
	Create(context.Context, *PeeringGroupNodeCreateRequest) (*PeeringGroupNodeCreateResponse, error)
	// Delete detaches a Node to a PeeringGroup.
	Delete(context.Context, *PeeringGroupNodeDeleteRequest) (*PeeringGroupNodeDeleteResponse, error)
	// Get reads the information of one peering group to node attachment.
	Get(context.Context, *PeeringGroupNodeGetRequest) (*PeeringGroupNodeGetResponse, error)
	// List gets a list of peering group node attachments.
	List(context.Context, *PeeringGroupNodeListRequest) (*PeeringGroupNodeListResponse, error)
	mustEmbedUnimplementedPeeringGroupNodesServer()
}

// UnimplementedPeeringGroupNodesServer must be embedded to have forward compatible implementations.
type UnimplementedPeeringGroupNodesServer struct {
}

func (UnimplementedPeeringGroupNodesServer) Create(context.Context, *PeeringGroupNodeCreateRequest) (*PeeringGroupNodeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPeeringGroupNodesServer) Delete(context.Context, *PeeringGroupNodeDeleteRequest) (*PeeringGroupNodeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPeeringGroupNodesServer) Get(context.Context, *PeeringGroupNodeGetRequest) (*PeeringGroupNodeGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPeeringGroupNodesServer) List(context.Context, *PeeringGroupNodeListRequest) (*PeeringGroupNodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPeeringGroupNodesServer) mustEmbedUnimplementedPeeringGroupNodesServer() {}

// UnsafePeeringGroupNodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeeringGroupNodesServer will
// result in compilation errors.
type UnsafePeeringGroupNodesServer interface {
	mustEmbedUnimplementedPeeringGroupNodesServer()
}

func RegisterPeeringGroupNodesServer(s grpc.ServiceRegistrar, srv PeeringGroupNodesServer) {
	s.RegisterService(&_PeeringGroupNodes_serviceDesc, srv)
}

func _PeeringGroupNodes_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupNodeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupNodesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupNodes/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupNodesServer).Create(ctx, req.(*PeeringGroupNodeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupNodes_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupNodesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupNodes/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupNodesServer).Delete(ctx, req.(*PeeringGroupNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupNodes_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupNodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupNodesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupNodes/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupNodesServer).Get(ctx, req.(*PeeringGroupNodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeeringGroupNodes_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeeringGroupNodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeeringGroupNodesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.PeeringGroupNodes/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeeringGroupNodesServer).List(ctx, req.(*PeeringGroupNodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeeringGroupNodes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PeeringGroupNodes",
	HandlerType: (*PeeringGroupNodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PeeringGroupNodes_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PeeringGroupNodes_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PeeringGroupNodes_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PeeringGroupNodes_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peering_group_nodes.proto",
}
