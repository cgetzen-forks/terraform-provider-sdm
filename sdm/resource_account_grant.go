// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceAccountGrant() *schema.Resource {
	return &schema.Resource{
		CreateContext:      wrapCrudOperation(resourceAccountGrantCreate),
		ReadContext:        wrapCrudOperation(resourceAccountGrantRead),
		DeleteContext:      wrapCrudOperation(resourceAccountGrantDelete),
		DeprecationMessage: "sdm_account_grant is deprecated, see docs for more info",
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"account_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The account id of this AccountGrant.",
			},
			"resource_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The resource id of this AccountGrant.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertAccountGrantToPlumbing(d *schema.ResourceData) *sdm.AccountGrant {
	return &sdm.AccountGrant{
		ID:         d.Id(),
		AccountID:  convertStringToPlumbing(d.Get("account_id")),
		ResourceID: convertStringToPlumbing(d.Get("resource_id")),
	}
}

func resourceAccountGrantCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertAccountGrantToPlumbing(d)

	resp, err := cc.AccountGrants().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create AccountGrant: %w", err)
	}
	d.SetId(resp.AccountGrant.ID)
	v := resp.AccountGrant
	d.Set("account_id", (v.AccountID))
	d.Set("resource_id", (v.ResourceID))
	return nil
}

func resourceAccountGrantRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertAccountGrantToPlumbing(d)
	_ = localVersion

	resp, err := cc.AccountGrants().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read AccountGrant %s: %w", d.Id(), err)
	}
	v := resp.AccountGrant
	d.Set("account_id", (v.AccountID))
	d.Set("resource_id", (v.ResourceID))
	return nil
}
func resourceAccountGrantDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.AccountGrants().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
