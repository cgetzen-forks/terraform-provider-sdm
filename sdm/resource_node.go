// This file was generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceNode() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceNodeCreate),
		ReadContext:   wrapCrudOperation(resourceNodeRead),
		UpdateContext: wrapCrudOperation(resourceNodeUpdate),
		DeleteContext: wrapCrudOperation(resourceNodeDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"gateway": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "Gateway represents a StrongDM CLI installation running in gateway mode.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"bind_address": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							ForceNew:    true,
							Description: "The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to \"0.0.0.0:listen_address_port\".",
						},
						"device": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Device is a read only device name uploaded by the gateway process when  it comes online.",
						},
						"gateway_filter": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "GatewayFilter can be used to restrict the peering between relays and gateways.",
						},
						"listen_address": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "The public hostname/port tuple at which the gateway will be accessible to clients.",
						},
						"location": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Location is a read only network location uploaded by the gateway process when it comes online.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							Description: "Unique human-readable name of the Gateway. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"version": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Version is a read only sdm binary version uploaded by the gateway process when it comes online.",
						},
						"token": {
							Type:      schema.TypeString,
							Computed:  true,
							Sensitive: true,
						},
					},
				},
			},
			"relay": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "Relay represents a StrongDM CLI installation running in relay mode.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"device": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Device is a read only device name uploaded by the gateway process when  it comes online.",
						},
						"gateway_filter": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "GatewayFilter can be used to restrict the peering between relays and gateways.",
						},
						"location": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Location is a read only network location uploaded by the gateway process when it comes online.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							Description: "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"version": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Version is a read only sdm binary version uploaded by the gateway process when it comes online.",
						},
						"token": {
							Type:      schema.TypeString,
							Computed:  true,
							Sensitive: true,
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertNodeToPlumbing(d *schema.ResourceData) sdm.Node {
	if list := d.Get("gateway").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.Gateway{}
		}
		out := &sdm.Gateway{
			ID:            d.Id(),
			BindAddress:   convertStringToPlumbing(raw["bind_address"]),
			Device:        convertStringToPlumbing(raw["device"]),
			GatewayFilter: convertStringToPlumbing(raw["gateway_filter"]),
			ListenAddress: convertStringToPlumbing(raw["listen_address"]),
			Location:      convertStringToPlumbing(raw["location"]),
			Name:          convertStringToPlumbing(raw["name"]),
			Tags:          convertTagsToPlumbing(raw["tags"]),
			Version:       convertStringToPlumbing(raw["version"]),
		}
		return out
	}
	if list := d.Get("relay").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.Relay{}
		}
		out := &sdm.Relay{
			ID:            d.Id(),
			Device:        convertStringToPlumbing(raw["device"]),
			GatewayFilter: convertStringToPlumbing(raw["gateway_filter"]),
			Location:      convertStringToPlumbing(raw["location"]),
			Name:          convertStringToPlumbing(raw["name"]),
			Tags:          convertTagsToPlumbing(raw["tags"]),
			Version:       convertStringToPlumbing(raw["version"]),
		}
		return out
	}
	return nil
}

func resourceNodeCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertNodeToPlumbing(d)

	resp, err := cc.Nodes().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create Node: %w", err)
	}
	d.SetId(resp.Node.GetID())
	switch v := resp.Node.(type) {
	case *sdm.Gateway:
		localV, _ := localVersion.(*sdm.Gateway)
		_ = localV
		d.Set("gateway", []map[string]interface{}{
			{
				"bind_address":   (v.BindAddress),
				"device":         (v.Device),
				"gateway_filter": (v.GatewayFilter),
				"listen_address": (v.ListenAddress),
				"location":       (v.Location),
				"name":           (v.Name),
				"tags":           convertTagsToPorcelain(v.Tags),
				"version":        (v.Version),
				"token":          resp.Token,
			},
		})
	case *sdm.Relay:
		localV, _ := localVersion.(*sdm.Relay)
		_ = localV
		d.Set("relay", []map[string]interface{}{
			{
				"device":         (v.Device),
				"gateway_filter": (v.GatewayFilter),
				"location":       (v.Location),
				"name":           (v.Name),
				"tags":           convertTagsToPorcelain(v.Tags),
				"version":        (v.Version),
				"token":          resp.Token,
			},
		})
	}
	return nil
}

func resourceNodeRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertNodeToPlumbing(d)
	_ = localVersion

	resp, err := cc.Nodes().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read Node %s: %w", d.Id(), err)
	}
	switch v := resp.Node.(type) {
	case *sdm.Gateway:
		localV, ok := localVersion.(*sdm.Gateway)
		if !ok {
			localV = &sdm.Gateway{}
		}
		_ = localV
		d.Set("gateway", []map[string]interface{}{
			{
				"bind_address":   (v.BindAddress),
				"device":         (v.Device),
				"gateway_filter": (v.GatewayFilter),
				"listen_address": (v.ListenAddress),
				"location":       (v.Location),
				"name":           (v.Name),
				"tags":           convertTagsToPorcelain(v.Tags),
				"version":        (v.Version),
				"token":          d.Get("gateway.0.token"),
			},
		})
	case *sdm.Relay:
		localV, ok := localVersion.(*sdm.Relay)
		if !ok {
			localV = &sdm.Relay{}
		}
		_ = localV
		d.Set("relay", []map[string]interface{}{
			{
				"device":         (v.Device),
				"gateway_filter": (v.GatewayFilter),
				"location":       (v.Location),
				"name":           (v.Name),
				"tags":           convertTagsToPorcelain(v.Tags),
				"version":        (v.Version),
				"token":          d.Get("relay.0.token"),
			},
		})
	}
	return nil
}
func resourceNodeUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {

	resp, err := cc.Nodes().Update(ctx, convertNodeToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update Node %s: %w", d.Id(), err)
	}
	d.SetId(resp.Node.GetID())
	return resourceNodeRead(ctx, d, cc)
}
func resourceNodeDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.Nodes().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
